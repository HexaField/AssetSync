import"../../../../web_modules/@AssetSync/common.js";import*as a from" https://cdn.skypack.dev/pin/three@v0.123.0-STd7XeVUbImsNuMmqKGL/min/three.js";import{AmmoPhysics as n}from"../../../../web_modules/@enable3d/ammo-physics.js";import{PHYSICS_SHAPES as e,PHYSICS_TYPES as c}from"../Constants.js";export default class h{constructor(s){this.database=s,this.assetSync=s.assetSync,this.objects={},this.scene=new a.Scene,this.physics=new n(this.scene),this.physicsTypes=Object.values(c)}getPhysicsType(s){for(let t in this.physicsTypes)if(this.physicsTypes[t]===s)return t-1;return-1}getPhysicsShape(s){switch(s){case e.AUTO:return"unknown";case e.CONVEX:return"convexMesh";case e.CONCAVE:return"concaveMesh";case e.EXTRUDE:return"hacd";case e.BOX:return"box";case e.CONE:return"cone";case e.CYLINDER:return"cylinder";case e.PLANE:return"plane";case e.SPHERE:return"sphere";case e.TORUS:return"torus";default:return"unknown"}}async initialise(s){for(let t of await this.database.getObjects())await this.loadObject(t);this.database.realmHandler.on("update",t=>this.update(t))}update(s){this.physics.update(s*1e3)}async createObject(s){}getObject(s){return this.objects[s]}async loadObject(s){if(!s)return;this.objects[s.uuid]=s,this.scene.add(s),this.restorePhysics(s)}restorePhysics(s){if(!s.userData.physics||s.body)return;if(this.getPhysicsType(s.userData.physics.type)<0)return;this.physics.add.existing(s,{shape:this.getPhysicsShape(s.userData.physics.shape),collisionFlags:this.getPhysicsType(s.userData.physics.type),mass:s.userData.physics.mass}),s.body.setGravity(0,-s.userData.physics.gravity,0),s.body.setBounciness(s.userData.physics.bounciness)}async updateObjectPosition(s){}async updateObject(s){}async removeObject(s){if(!s||!this.objects[s.uuid])return;s.body&&this.physics.destroy(s.body),this.scene.remove(s),delete this.objects[s.uuid]}teleport(s,t,i,r){s.body.setCollisionFlags(2),s.position.set(t,i,r),s.body.needUpdate=!0,s.body.once.update(()=>{s.body.setCollisionFlags(s.userData.physics.type),s.body.setVelocity(0,0,0),s.body.setAngularVelocity(0,0,0)})}}
