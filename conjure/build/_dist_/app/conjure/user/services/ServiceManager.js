export default class r{constructor(e){this.conjure=e,this.services={}}getServiceAsJson(){let e={};for(let i of Object.keys(this.services))e[i]=this.services[i].toJson();return e}addService(e){this.services[e.getName()]=e}linkService(e){this.services[e].link()}unlinkService(e){this.services[e].unlink()}getServiceLinked(e){return this.services[e].getAuthenticated()}getService(e){return this.services[e]}refreshServices(){this.conjure.getScreens().screenServices.selectService()}async initialiseServices(){for(let e of Object.values(this.services))await e.initialise()&&(e.isInitialised=!0);this.conjure.getScreens().screenServices.addServices()}async getPotentialRealms(){let e=[];for(let i of Object.values(this.services))e.push(...await i.getRealms());return e}async getRealmsFromConnectedServices(){let e=[];for(let i of Object.values(this.services)){let s=await i.getRealms();for(let t in s);}return e}setServicesFromDatabase(e){for(let i of Object.keys(e))this.getService(i)&&this.getService(i).readFromJson(e[i])}}
