import n from"../../../../web_modules/events.js";import{NETWORKING_OPCODES as r}from"../Constants.js";import{REALM_WORLD_GENERATORS as i}from"./RealmData.js";import l from"./datastores/RealmDatabaseBasic.js";import"./datastores/RealmDatabaseProcedural.js";import"../../../../web_modules/@AssetSync/common.js";export default class c extends n{constructor(e,t,s){super();this.realmData=e,this.assetSync=t,this.dhtProtocol=s+this.realmData.id,this.objects={},this._get=async a=>{console.warn("ERROR! Database",e.id,"has no _get implemented")},this._put=async(a,o)=>{console.warn("ERROR! Database",e.id,"has no _put implemented")},this._getAllLocal=async()=>{console.warn("ERROR! Database",e.id,"has no _getAllLocal implemented")},this._removeLocal=async a=>{console.warn("ERROR! Database",e.id,"has no _removeLocal implemented")}}async start(e=()=>{}){console.log("Opening database for realm",this.realmData.id),this.network=await this.assetSync.networkPlugin.joinNetwork(this.realmData.id),this.network.on("message",t=>{try{const{opcode:s,content:a}=JSON.parse(t.data);this.emit(s,a,t.from)}catch(s){console.log("hmm bad message",s,t)}}),this.on(r.OBJECT.CREATE,(t,s)=>{const{uuid:a,data:o}=t;this._put(a,JSON.stringify(o))}),this.on(r.OBJECT.UPDATE_PROPERTIES,(t,s)=>{const{uuid:a,data:o}=t;this._put(a,JSON.stringify(o))}),this.on(r.OBJECT.DESTROY,(t,s)=>{const{uuid:a,data:o}=t;this._removeLocal(a,JSON.stringify(o))}),this.on(r.OBJECT.MOVE,(t,s)=>{const{uuid:a,data:o}=JSON.parse(t);this._put(a,o)}),this.on(r.OBJECT.GROUP,(t,s)=>{}),e({message:"Connected to network..."}),e({message:"Loading database"}),this.realmData.worldSettings.worldGeneratorType===i.NONE&&await l(this),console.log("Loaded",(await this._getAllLocal()).length,"objects from ")}async stop(){}sendToAll(e,t){this.network.broadcast(JSON.stringify({opcode:e,content:t}))}sendTo(e,t,s){this.network.sendTo(e,JSON.stringify({opcode:t,content:s}))}async joinNetwork(){this.network.getPeers().length||await new Promise(e=>{this.network.on("onPeerJoin",()=>{e()})})}async createObject({uuid:e,data:t}){try{return await this._put(e,JSON.stringify(t)),this.sendToAll(r.OBJECT.CREATE,{uuid:e,data:t}),!0}catch(s){return console.log(s),!1}}async getObjects(e,t){const s=[];return s.push(...await this._getAllLocal()),console.log(s),s}async updateObject({uuid:e,data:t}){try{return await this._put(e,JSON.stringify(t)),this.sendToAll(r.OBJECT.UPDATE_PROPERTIES,{uuid:e,data:t}),!0}catch(s){return console.log(s),!1}}async dereferenceObject({uuid:e,data:t}){try{return await this._removeLocal(e,JSON.stringify(t)),this.sendToAll(r.OBJECT.DESTROY,{uuid:e,data:t}),!0}catch(s){return console.log(s),!1}}async transactObject({uuid:e,data:t}){}}
