import n from"../../../../web_modules/events.js";import{NETWORKING_OPCODES as r}from"../Constants.js";import{REALM_WORLD_GENERATORS as i}from"./RealmData.js";import l from"./datastores/RealmDatabaseBasic.js";import"./datastores/RealmDatabaseProcedural.js";import"../../../../web_modules/@AssetSync/common.js";export default class c extends n{constructor(t,e,a){super();this.realmData=t,this.assetSync=e,this.dhtProtocol=a+this.realmData.id,this.objects={},this._get=async s=>{console.warn("ERROR! Database",t.id,"has no _get implemented")},this._put=async(s,o)=>{console.warn("ERROR! Database",t.id,"has no _put implemented")},this._getAllLocal=async()=>{console.warn("ERROR! Database",t.id,"has no _getAllLocal implemented")},this._removeLocal=async s=>{console.warn("ERROR! Database",t.id,"has no _removeLocal implemented")}}async start(t=()=>{}){console.log("Opening database for realm",this.realmData.id),this.network=await this.assetSync.networkPlugin.joinNetwork(this.realmData.id),this.network.on("message",e=>{try{const{opcode:a,content:s}=JSON.parse(e.data);this.emit(a,s,e.from)}catch(a){console.log("hmm bad message",a,e)}}),this.on(r.OBJECT.CREATE,(e,a)=>{const{uuid:s,data:o}=e;this._put(s,JSON.stringify(o))}),this.on(r.OBJECT.UPDATE_PROPERTIES,(e,a)=>{const{uuid:s,data:o}=e;this._put(s,JSON.stringify(o))}),this.on(r.OBJECT.DESTROY,(e,a)=>{const{uuid:s,data:o}=e;this._removeLocal(s,JSON.stringify(o))}),this.on(r.OBJECT.MOVE,(e,a)=>{const{uuid:s,data:o}=JSON.parse(e);this._put(s,o)}),this.on(r.OBJECT.GROUP,(e,a)=>{}),t({message:"Connected to network..."}),t({message:"Loading database"}),this.realmData.worldSettings.worldGeneratorType===i.NONE&&await l(this),console.log("Loaded",(await this._getAllLocal()).length,"objects from ")}async stop(){}sendToAll(t,e){this.network.broadcast(JSON.stringify({opcode:t,content:e}))}sendTo(t,e,a){this.network.sendTo(t,JSON.stringify({opcode:e,content:a}))}async joinNetwork(){this.network.getPeers().length||await new Promise(t=>{this.network.on("onPeerJoin",()=>{t()})})}async createObject({uuid:t,data:e}){try{return await this._put(t,JSON.stringify(e)),this.sendToAll(r.OBJECT.CREATE,{uuid:t,data:e}),!0}catch(a){return console.log(a),!1}}async getObjects(t,e){const a=[];return a.push(...await this._getAllLocal()),a.map(s=>{try{return{uuid:s.key,data:JSON.parse(s.value)}}catch(o){return this._removeLocal(s.key),{}}})}async updateObject({uuid:t,data:e}){try{return await this._put(t,JSON.stringify(e)),this.sendToAll(r.OBJECT.UPDATE_PROPERTIES,{uuid:t,data:e}),!0}catch(a){return console.log(a),!1}}async dereferenceObject({uuid:t,data:e}){try{return await this._removeLocal(t),this.sendToAll(r.OBJECT.DESTROY,{uuid:t}),!0}catch(a){return console.log(a),!1}}async transactObject({uuid:t,data:e}){}}
