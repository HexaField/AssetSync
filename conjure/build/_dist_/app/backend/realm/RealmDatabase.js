import i from"../../../../web_modules/events.js";import{NETWORKING_OPCODES as r}from"../Constants.js";import{REALM_WORLD_GENERATORS as l}from"./RealmData.js";import c from"./datastores/RealmDatabaseBasic.js";import"./datastores/RealmDatabaseProcedural.js";import"../../../../web_modules/@AssetSync/common.js";export default class d extends i{constructor(t,a,e){super();this.realmData=t,this.assetSync=a,this.dhtProtocol=e+this.realmData.id,this.objects={},this._stopDatastores=async()=>{console.warn("ERROR! Database",t.id,"has no _stopDatastores implemented")},this._get=async s=>{console.warn("ERROR! Database",t.id,"has no _get implemented")},this._put=async(s,o)=>{console.warn("ERROR! Database",t.id,"has no _put implemented")},this._getAllLocal=async()=>{console.warn("ERROR! Database",t.id,"has no _getAllLocal implemented")},this._removeLocal=async s=>{console.warn("ERROR! Database",t.id,"has no _removeLocal implemented")}}async start(t=()=>{},a){console.log("Opening database for realm",this.realmData.id),this.network=await this.assetSync.networkPlugin.joinNetwork(this.realmData.id),this.network.on("message",e=>{try{const{opcode:s,content:o}=JSON.parse(e.data);this.emit(s,o,e.from)}catch(s){console.log("hmm bad message",s,e)}}),this.on(r.OBJECT.CREATE,(e,s)=>{const{uuid:o,data:n}=e;this._put(o,JSON.stringify(n))}),this.on(r.OBJECT.UPDATE_PROPERTIES,(e,s)=>{const{uuid:o,data:n}=e;this._put(o,JSON.stringify(n))}),this.on(r.OBJECT.DESTROY,(e,s)=>{const{uuid:o,data:n}=e;this._removeLocal(o,JSON.stringify(n))}),this.on(r.OBJECT.MOVE,(e,s)=>{const{uuid:o,data:n}=JSON.parse(e);this._put(o,n)}),this.on(r.OBJECT.GROUP,(e,s)=>{}),t("Connected to network..."),t("Loading database"),this.realmData.worldSettings.worldGeneratorType===l.NONE&&await c(this,t,a),console.log("Loaded",(await this._getAllLocal()).length,"objects from ")}async stop(){await this.network.leave(),await this._stopDatastores()}sendToAll(t,a){this.network.broadcast(JSON.stringify({opcode:t,content:a}))}sendTo(t,a,e){this.network.sendTo(t,JSON.stringify({opcode:a,content:e}))}async joinNetwork(){this.network.getPeers().length||await new Promise(t=>{this.network.on("onPeerJoin",()=>{t()})})}async createObject({uuid:t,data:a}){try{return await this._put(t,JSON.stringify(a)),this.sendToAll(r.OBJECT.CREATE,{uuid:t,data:a}),!0}catch(e){return console.log(e),!1}}async getObjects(t,a){const e=[];return e.push(...await this._getAllLocal()),e.map(s=>{try{return{uuid:s.key,data:JSON.parse(s.value)}}catch(o){return}}).filter(s=>s!==void 0)}async updateObject({uuid:t,data:a}){try{return await this._put(t,JSON.stringify(a)),this.sendToAll(r.OBJECT.UPDATE_PROPERTIES,{uuid:t,data:a}),!0}catch(e){return console.log(e),!1}}async dereferenceObject({uuid:t,data:a}){try{return await this._put(t,""),this.sendToAll(r.OBJECT.DESTROY,{uuid:t}),!0}catch(e){return console.log(e),!1}}async transactObject({uuid:t,data:a}){}}
