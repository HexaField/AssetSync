import r from"./realm/RealmDatabase.js";import i,{GLOBAL_REALMS as l}from"./realm/RealmData.js";import{isNode as o}from"../../../web_modules/@AssetSync/common.js";export default class n{constructor(a){this.assetSync=a,this.databasePlugin=a.syncedDatabasePlugin,this.dhtProtocol="/realm/",this.realms={}}async get(a){return await this.assetSync.dhtPlugin.get({key:this.dhtProtocol+a})}async put(a,t){return await this.assetSync.dhtPlugin.put({key:this.dhtProtocol+a,value:t,minPeers:"1"})}receiveFromDHT(a,t,e){try{t?this.addDatabase(typeof t=="string"?JSON.parse(t):t):this.removeDatabase(typeof t=="string"?JSON.parse(t):t)}catch(s){console.log(s,JSON.stringify(t,null,2))}}async initialise(){await this.preloadGlobalRealms();for(let a of await this.getRealms())a.key.substring(0,7)==="/realm/"&&await this.addDatabase(JSON.parse(a.value));o||console.log(await this.getRealms())}async preloadGlobalRealms(){for(let a of Object.values(l)){const t=new i(a);t.global=!0,await this.addDatabase(t)}}async forgetRealm(a){await this.assetSync.dhtPlugin.removeLocal({key:a.id}),await this.removeDatabase(a)}async getRealms(){return await this.assetSync.dhtPlugin.getAllLocal()}async getRealmById(a){return await this.get(a)}async createRealm(a){this.put(a.id,JSON.stringify(a)),await this.addDatabase(a)}updateRealm(a){}getDatabase(a){return this.realms[a]}async addDatabase(a,t){return this.realms[a.id]||await this._createDatabase(a,t)}async _createDatabase(a,t){const e=new r(a,this.assetSync,this.dhtProtocol);return await e.start(t),this.realms[a.id]=e,e}async removeDatabase(a){this.realms[a.id]&&(await this.assetSync.dhtPlugin.removeDHT(this.dhtProtocol+a.id),await this.realms[a.id].stop(),delete this.realms[a.id])}}
