import*as s from"https://cdn.skypack.dev/pin/three@v0.117.1-NetLzdTnw9ga3y6o633U/min/three.js";import u from"./Terrain.js";import l from"../features/FeatureArtGallery.js";import h from"../features/FeatureLobby.js";import{REALM_WORLD_GENERATORS as o}from"./RealmData.js";import c from"../Platform.js";import d from"./ObjectManager.js";import g from"../features/FeatureDiscord.js";import p from"../../../../../web_modules/events.js";import{NETWORKING_OPCODES as i}from"./NetworkingSchemas.js";export const GLOBAL_REALMS={LOBBY:{id:"Lobby",name:"Lobby",timestamp:0,worldSettings:{features:["Lobby"],worldGeneratorType:o.NONE}},GALLERY:{id:"Gallery",name:"Art Gallery",timestamp:0,worldData:{playsAudio:!0},worldSettings:{features:["Gallery"],worldGeneratorType:o.NONE}},CAMPFIRE:{id:"Campfire",name:"Campfire",timestamp:0,worldData:{playsAudio:!0},worldSettings:{features:["Campfire"],worldGeneratorType:o.NONE}}};export default class O extends p{constructor(e,t){super();this.world=e,this.conjure=this.world.conjure,this.group=new s.Group,this.world.group.add(this.group),this.objectLoader=new s.ObjectLoader,this.objectManager=new d(this),this.realmData=t,this.realmID=t.getID(),this.onObjectCreate=this.onObjectCreate.bind(this),this.onObjectUpdate=this.onObjectUpdate.bind(this),this.onObjectGroup=this.onObjectGroup.bind(this),this.onObjectMove=this.onObjectMove.bind(this),this.onObjectDestroy=this.onObjectDestroy.bind(this),this.vec3=new s.Vector3,this.quat=new s.Quaternion,this.features=[],this.loading=!0,this.networkProtocolCallbacks={}}async preload(){this.realmData.getData().worldSettings.worldGeneratorType===o.INFINITE_WORLD&&(this.terrain=new u(this.conjure,this.world.group,this.realmData.getWorldSettings())),this.realmData.getData().worldData.playsAudio&&await this.conjure.getAudioManager().create(!0),await this.preloadFeatures()}async preloadFeatures(){for(let e of this.realmData.getData().worldSettings.features)switch(e){case"Gallery":{let t=new l(this);await t.preload(),this.features.push(t);break}case"Lobby":{let t=new h(this);this.terrain=new c(this.conjure,this.world.group),await t.preload(),this.features.push(t);break}case"Discord":{let t=new g(this);this.terrain=new c(this.conjure,this.world.group),await t.preload(),this.features.push(t);break}default:break}}sendData(e,t){this.network.broadcast(JSON.stringify({opcode:e,content:t}))}sendTo(e,t,a){this.network.sendTo(a,JSON.stringify({opcode:e,content:t}))}async load(){for(let e of this.features)await e.load();this.network=await this.conjure.assetSync.networkPlugin.joinNetwork(this.realmID),this.network.on("message",e=>{if(e.from===this.conjure.assetSync.networkPlugin.getPeerID())return;if(e.data===void 0||e.data===null){this.warn("Received bad buffer data",e.data,"from peer",e.from);return}const{opcode:t,content:a}=JSON.parse(e.data);this.emit(t,a,e.from)}),this.network.on("onPeerJoin",async e=>{this.sendTo(i.USER.METADATA,{username:this.conjure.getProfile().getUsername()},e)}),this.network.on("onPeerLeave",e=>{console.log("User ",e," has left the realm"),this.world.onUserLeave(e)}),this.loading=!1}async leave(){this.getObjectManager().destroyAllObjects(),await this.conjure.assetSync.networkPlugin.leaveNetwork(this.realmID),this.terrain&&this.terrain.destroy();for(let e of this.features)await e.unload();this.world.group.remove(this.group),console.log("successfully left realm")}getData(){return this.realmData.getData()}update(e){for(let t of this.features)t.update(e)}getObjectManager(){return this.objectManager}onObjectCreate(e){this.loadObjectFromPeer(e.uuid,e.data)}onObjectUpdate(e,t){console.log("onObjectUpdate",e)}onObjectGroup(e,t){this.objectManager.groupObjects(this.objectManager.getObjectByUUID(e.newParentUUID),this.objectManager.getObjectByUUID(e.newChildUUID),!0)}onObjectMove(e,t){for(let a of e.objects)this.objectManager.updateObjectFromClient(a.uuid,a.data)}async onObjectDestroy(e,t){await this.conjure.getDataHandler(SERVER_PROTOCOLS.DESTROY_OBJECT,{realmID:this.realmID,uuid:e}),this.objectManager.destroyObjectByHash(e)}async loadObjectFromPeer(e,t){try{await this.conjure.getDataHandler(SERVER_PROTOCOLS.CREATE_OBJECT,{realmID:this.realmID,uuid:e,data:t}),await this.loadObject(t)}catch(a){console.log("REALM: could not load object",object.hash,"with error",a)}}async createObject(e){e.userData.originatorID=this.conjure.getProfile().getID(),e.position.copy(this.world.user.previewMeshPoint.getWorldPosition(this.vec3)),e.quaternion.copy(this.world.user.previewMeshPoint.getWorldQuaternion(this.quat)),e.updateMatrixWorld(),this.restorePhysics(e);let t=await this.objectToJSON(e);this.conjure.screenManager.hideScreen();let a=await this.conjure.getDataHandler(SERVER_PROTOCOLS.CREATE_OBJECT,{realmID:this.realmID,uuid:e.uuid,data:t});a&&(this.objectManager.addObject(e),t=await this.objectToJSON(e),this.sendData(i.OBJECT.CREATE,{uuid:a.uuid,data:t}))}async objectToJSON(e){let t=e.toJSON();return t;if(t.images)for(let a=0;a<t.images.length;a++){if(t.images[a].url===this.conjure.assetManager.missingTextureData)continue;t.images[a].hash=await this.conjure.assetManager.createAsset(ASSET_TYPE.TEXTURE,t.images[a].url,t.images[a].uuid);let n=this.conjure.assetManager.getByIPFSHash(ASSET_TYPE.TEXTURE,t.images[a].hash).data.uuid;if(n!==t.images[a].uuid){if(t.textures)for(let r=0;r<t.textures.length;r++)t.textures[r].image===t.images[a].uuid&&(t.textures[r].image=n);t.images[a].uuid=n}t.images[a].url=""}}async loadObject(e){try{let t=this.loadObjectAssets(e);return await this.conjure.assetManager.saveAssets(t),this.restorePhysics(t),this.objectManager.addObject(t),e.object.userData.lastUpdate&&this.objectManager.updateObjectFromClient(t.uuid,e.object.userData.lastUpdate),!0}catch(t){return console.log(t,e),!1}}loadObjectAssets(e){return this.objectLoader.parse(e)}restorePhysics(e){e.userData.physics&&!e.body&&this.objectManager.getPhysicsType(e.userData.physics.type)>=0&&(this.conjure.physics.add.existing(e,{shape:this.objectManager.getPhysicsShape(e.userData.physics.shape),collisionFlags:this.objectManager.getPhysicsType(e.userData.physics.type),mass:e.userData.physics.mass}),e.body.setGravity(0,e.userData.physics.gravity*this.gravity,0),e.body.setBounciness(e.userData.physics.bounciness))}async updateObjectPosition(e){await this.updateObject(e)}async updateObject(e){if(!e)return;if(!e.uuid){console.log("Tried to update object without a hash! Are you sure this object is a top parent?");return}let t=await this.objectToJSON(e);await this.conjure.getDataHandler(SERVER_PROTOCOLS.UPDATE_OBJECT,{realmID:this.realmID,uuid:object.uuid,data:t})}async destroyObject(e){if(e.userData.markedDestroyed=!0,this.objectManager.getObject(e)){let t=await this.conjure.getDataHandler(SERVER_PROTOCOLS.DESTROY_OBJECT,{realmID:this.realmID,uuid:object.uuid});t?(this.objectManager.destroyObject(e),this.sendData(i.OBJECT.DESTROY,e.uuid,!0)):(e.userData.markedDestroyed=!1,console.log("failed to remove object",e.uuid))}else{let t=this.objectManager.getTopGroupObject(e);this.sendData(i.OBJECT.UPDATE,t,!0),this.objectManager.destroyObject(e,{isChild:!0}),await this.updateObject(t)}}}
