import{isNode as o,EventDispatcher as a}from"../../web_modules/@AssetSync/common.js";import i from"./backend/Assets.js";import r from"./backend/RealmHandler.js";import c from"./backend/ClientDatastore.js";export default async function(e){const t=new l(e);return await t.start(),t}class l extends a{constructor({assetSync:e}){super();this.assetSync=e}async start(){this.assets=new i(this.assetSync),this.realms=new r(this.assetSync),await this.realms.initialise(),this.globalNetwork=await this.assetSync.networkPlugin.joinNetwork("/conjure"),o&&(this.globalNetwork.on("onPeerJoin",e=>{console.log("Peer "+e.substring(0,8)+" joined")}),this.globalNetwork.on("onPeerLeave",e=>{console.log("Peer "+e.substring(0,8)+" left")})),this.assetSync.dhtPlugin.dht.on("put",(e,t,s)=>{console.log("Received dht entry",e,t);const n=e.split(":");switch(n[0]){case this.realms.dhtType:this.realms.receiveFromDHT(n[1],t,s);break;case this.assets.dhtType:this.assets.receiveFromDHT(n[1],t,s);break;default:break}}),this.assetSync.dhtPlugin.dht.on("removed",(e,t)=>{console.log("Removed dht entry",e,t);const s=e.split(":");switch(s[0]){case this.realms.dhtType:this.realms.receiveFromDHT(e);break;case this.assets.dhtType:this.assets.receiveFromDHT(e);break;default:break}}),o||this.loadConjure()}async loadConjure(){this.clientDatastore=new c(this.assetSync),await this.clientDatastore.initialise(),window.clientDatastore=this.clientDatastore,window.assetSync=this.assetSync;const{startConjure:e}=await import("./conjure/Conjure.js");e(this)}}
