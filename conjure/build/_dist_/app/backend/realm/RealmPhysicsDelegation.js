import{PHYSICS_SHAPES as e,PHYSICS_TYPES as r}from"../Constants.js";export class RealmPhysicsDelegation{constructor(s){this.physicsTypes=Object.values(r),this.realmWorld=s,this.primaries={},this.replicas={},this.isDelegatingPhysics=!1}async initialise(s){this.isDelegatingPhysics=s}setMaster(){this.isDelegatingPhysics=!0}setSlave(){this.isDelegatingPhysics=!1}addPhysics(s){if(!s.userData.physics||s.body)return;if(this._getPhysicsType(s.userData.physics.type)<0)return;const i=this._getCollisionType(s);this.realmWorld.physics.add.existing(s,{shape:this._getPhysicsShape(s.userData.physics.shape),collisionFlags:i,mass:s.userData.physics.mass}),s.body.setGravity(0,-s.userData.physics.gravity,0),s.body.setBounciness(s.userData.physics.bounciness)}removePhysics(s){s.body&&this.realmWorld.physics.destroy(s.body)}teleport(s,i,t,a){s.body&&s.body.setCollisionFlags(2),s.position.set(i,t,a),s.body&&(s.body.needUpdate=!0,s.body.once.update(()=>{s.body.setCollisionFlags(s.userData.physics.type),s.body.setVelocity(0,0,0),s.body.setAngularVelocity(0,0,0)}))}_getCollisionType(s){const i=this._getPhysicsType(s.userData.physics.type);return this.isDelegatingPhysics&&Object.keys(this.primaries).includes(s.uuid)?i:2}_getPhysicsType(s){for(let i in this.physicsTypes)if(this.physicsTypes[i]===s)return i-1;return-1}_getPhysicsShape(s){switch(s){case e.AUTO:return"unknown";case e.CONVEX:return"convexMesh";case e.CONCAVE:return"concaveMesh";case e.EXTRUDE:return"hacd";case e.BOX:return"box";case e.CONE:return"cone";case e.CYLINDER:return"cylinder";case e.PLANE:return"plane";case e.SPHERE:return"sphere";case e.TORUS:return"torus";default:return"unknown"}}}
