class c{constructor(r="keyval-store",e="keyval"){this.storeName=e,this._dbp=new Promise((t,n)=>{const o=indexedDB.open(r,1);o.onerror=()=>n(o.error),o.onsuccess=()=>t(o.result),o.onupgradeneeded=()=>{o.result.createObjectStore(e)}})}_withIDBStore(r,e){return this._dbp.then(t=>new Promise((n,o)=>{const s=t.transaction(this.storeName,r);s.oncomplete=()=>n(),s.onabort=s.onerror=()=>o(s.error),e(s.objectStore(this.storeName))}))}}let u;function i(){return u||(u=new c),u}function a(r,e=i()){let t;return e._withIDBStore("readonly",n=>{t=n.get(r)}).then(()=>t.result)}function l(r,e,t=i()){return t._withIDBStore("readwrite",n=>{n.put(e,r)})}function d(r,e=i()){return e._withIDBStore("readwrite",t=>{t.delete(r)})}function h(r=i()){return r._withIDBStore("readwrite",e=>{e.clear()})}function p(r=i()){const e=[];return r._withIDBStore("readonly",t=>{(t.openKeyCursor||t.openCursor).call(t).onsuccess=function(){if(!this.result)return;e.push(this.result.key),this.result.continue()}}).then(()=>e)}export{c as Store,h as clear,d as del,a as get,p as keys,l as set};
