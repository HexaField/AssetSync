import{isNode as n,EventDispatcher as i,isWebWorker as r}from"../../web_modules/@AssetSync/common.js";import a from"./backend/Assets.js";import c from"./backend/RealmHandler.js";import l from"./backend/Profiles.js";export default async function(s){new h(s)}class h extends i{constructor({assetSync:s,worldSync:e}){super();this.assetSync=s,this.worldSync=e,this.start()}async start(){this.assets=new a(this.assetSync),this.realms=new c(this.assetSync),this.realms.initialise(),this.profiles=new l(this.assetSync),this.globalNetwork=await this.assetSync.networkPlugin.joinNetwork("/conjure"),n&&(this.globalNetwork.on("onPeerJoin",s=>{console.log("Peer "+s.substring(0,8)+" joined")}),this.globalNetwork.on("onPeerLeave",s=>{console.log("Peer "+s.substring(0,8)+" left")})),this.assetSync.dhtPlugin.dht.on("put",(s,e,t)=>{console.log("Received dht entry",s,e);const o=s.split(":");switch(o[0]){case this.realms.dhtType:this.realms.receiveFromDHT(o[1],e,t);break;case this.assets.dhtType:this.assets.receiveFromDHT(o[1],e,t);break;default:break}}),this.assetSync.dhtPlugin.dht.on("removed",(s,e)=>{console.log("Removed dht entry",s,e);const t=s.split(":");switch(t[0]){case this.realms.dhtType:this.realms.receiveFromDHT(s);break;case this.assets.dhtType:this.assets.receiveFromDHT(s);break;default:break}}),n||(r&&(worldSync.addFunction("requestPointerLock"),worldSync.addFunction("exitPointerLock"),worldSync.addFunction("hasFocus")),this.loadConjure())}async loadConjure(){const{startConjure:s}=await import("./conjure/Conjure.js");s(this),window.assetSync=this.assetSync}}
