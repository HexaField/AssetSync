import*as e from"https://cdn.skypack.dev/pin/three@v0.117.1-NetLzdTnw9ga3y6o633U/min/three.js";import h from"./Feature.js";import m from"../structures/StructurePortal.js";import{POSTPROCESSING as s}from"../../PostProcessing.js";import{REALM_VISIBILITY as c,REALM_WHITELIST as u}from"../realm/RealmData.js";export default class p extends h{constructor(t){super(t)}async preload(){this.portals=[],this.realmDatas=(await this.realm.world.getRealms()).filter(r=>r.id!=="Lobby"),this.realmDatas.length<8&&this.realmDatas.push(...new Array(8-this.realmDatas.length).fill("")),this.portalsCount=this.realmDatas.length;let t=new e.Line(this.createCircleGeometry(2),new e.LineBasicMaterial({color:new e.Color("aqua"),linewidth:2}));t.layers.enable(s.BLOOM_SCENE),this.realm.group.add(t);for(let r=0;r<this.portalsCount;r++){let l=(r+.5)*Math.PI*2/this.portalsCount+Math.PI/2,a=new e.Vector2(Math.cos(l),Math.sin(l)),o=new e.Color("aqua");if(this.realmDatas[r]!==""){this.realmDatas[r].visibility===c.GLOBAL?o=new e.Color("green"):this.realmDatas[r].whitelist.type!==u.NONE&&(o=new e.Color("red"));let n=new m(this.realm.conjure,this.realm.group,{realmData:this.realmDatas[r],position:{x:-a.x*10,y:2,z:-a.y*10},color:o});this.portals.push(n);let i=new e.Line(this.createLineGeometry(new e.Vector3(-a.x*2,0,-a.y*2),new e.Vector3(-a.x*9,0,-a.y*9)),new e.LineBasicMaterial({color:16777215,linewidth:2,vertexColors:!0}));i.layers.enable(s.BLOOM_SCENE),i.geometry.setAttribute("color",new e.Float32BufferAttribute([...new e.Color("aqua").toArray(),...o.clone().toArray()],3)),this.realm.group.add(i)}t=new e.Line(this.createCircleGeometry(1),new e.LineBasicMaterial({color:o,linewidth:2})),this.realmDatas[r]!==""&&t.layers.enable(s.BLOOM_SCENE),t.position.set(-a.x*10,0,-a.y*10),this.realm.group.add(t)}t=new e.Line(this.createCircleGeometry(20,this.portalsCount),new e.LineBasicMaterial({color:new e.Color("aqua"),linewidth:2})),t.layers.enable(s.BLOOM_SCENE),this.realm.group.add(t)}createLineGeometry(t,r){let l=new e.BufferGeometry().setFromPoints([t,r]);return l}createCircleGeometry(t,r){let l=new e.EllipseCurve(0,0,t,t,0,2*Math.PI,!1,0),a=l.getPoints(r||t*32),o=new e.BufferGeometry().setFromPoints(a);return o.rotateX(Math.PI/2),o}async load(){}async unload(){this.portals.forEach(t=>t.destroy())}update(t){}}
