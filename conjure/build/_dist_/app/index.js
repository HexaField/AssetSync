import{isNode as a,EventDispatcher as i}from"../../web_modules/@AssetSync/common.js";import o from"./backend/Assets.js";import r from"./backend/RealmHandler.js";import c from"./backend/ClientDatastore.js";export default async function(t){const e=new l(t);return await e.start(),e}class l extends i{constructor({assetSync:t}){super();this.assetSync=t}async start(){this.assets=new o(this.assetSync),this.realms=new r(this.assetSync),await this.realms.initialise(),this.globalNetwork=await this.assetSync.networkPlugin.joinNetwork("/conjure"),a&&(this.globalNetwork.on("onPeerJoin",t=>{this.assetSync.log("Peer "+t.substring(0,8)+" joined")}),this.globalNetwork.on("onPeerLeave",t=>{this.assetSync.log("Peer "+t.substring(0,8)+" left")})),this.assetSync.dhtPlugin.dht.on("put",(t,e,s)=>{console.log("Received dht entry",t,e);const n=t.split(":");switch(n[0]){case this.realms.dhtType:this.realms.receiveFromDHT(n[1],e,s);break;case this.assets.dhtType:this.assets.receiveFromDHT(n[1],e,s);break;default:break}}),this.assetSync.dhtPlugin.dht.on("removed",(t,e)=>{console.log("Removed dht entry",t,e);const s=t.split(":");switch(s[0]){case this.realms.dhtType:this.realms.receiveFromDHT(t);break;case this.assets.dhtType:this.assets.receiveFromDHT(t);break;default:break}}),a||this.loadConjure()}async loadConjure(){this.clientDatastore=new c(this.assetSync),await this.clientDatastore.initialise(),window.clientDatastore=this.clientDatastore,window.assetSync=this.assetSync;const{startConjure:t}=await import("./conjure/Conjure.js");t(this)}}
