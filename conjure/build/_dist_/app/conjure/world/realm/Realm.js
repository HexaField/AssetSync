import*as r from" https://cdn.skypack.dev/pin/three@v0.123.0-STd7XeVUbImsNuMmqKGL/min/three.js";import"./Terrain.js";import o from"../features/FeatureArtGallery.js";import i from"../features/FeatureLobby.js";import{REALM_TYPES as n}from"../../../backend/realm/RealmData.js";import c from"../Platform.js";import d from"../object/ObjectManager.js";import h from"../features/FeatureDiscord.js";import u from"../../../../../web_modules/events.js";import{NETWORKING_OPCODES as s}from"../../../backend/Constants.js";import{getParams as l}from"../../../../../web_modules/@AssetSync/common.js";export default class j extends u{constructor(e,t){super();this.world=e,this.conjure=this.world.conjure,this.group=new r.Group,this.world.group.add(this.group),this.objectLoader=new r.ObjectLoader,this.objectManager=new d(this),this.realmData=t,this.realmID=t.getID(),this.vec3=new r.Vector3,this.quat=new r.Quaternion,this.features=[],this.loading=!0,this.networkProtocolCallbacks={}}async preload(){this.realmData.getData().worldData.playsAudio&&await this.conjure.getAudioManager().create(!0),await this.preloadFeatures()}async preloadFeatures(){for(let e of this.realmData.getData().worldSettings.features)switch(e){case"Gallery":{let t=new o(this);await t.preload(),this.features.push(t);break}case"Platform":{this.terrain=new c(this.conjure,this.world.group);break}case"Lobby":{let t=new i(this);await t.preload(),this.features.push(t);break}case"Discord":{let t=new h(this);await t.preload(),this.features.push(t);break}default:break}}sendData(e,t){}sendTo(e,t,a){}async load(){for(let e of this.features)await e.load();this.database=await this.world.conjure.realms.addDatabase(this.realmData,(...e)=>{this.conjure.loadingScreen.setText(...e,!1),console.log("Loading Realm:",...e)},l().network==="true"),this.database.eventHooks.on("message",e=>{try{const{opcode:t,content:a}=JSON.parse(e.data);this.emit(t,a,e.from)}catch(t){console.log("hmm bad message",t,e)}}),this.database.eventHooks.on("onPeerJoin",e=>{this.world.sendMetadata(e),this.world.requestMetadata(e)}),this.database.eventHooks.on("onPeerLeave",e=>{this.world.onUserLeave(e)}),this.on(s.USER.METADATA,this.world.onUserData),this.on(s.USER.REQUEST_METADATA,(e,t)=>{this.world.sendMetadata(t)}),this.on(s.USER.MOVE,this.world.onUserMove),this.on(s.USER.ANIMATION,this.world.onUserAnimation),this.on(s.USER.LEAVE,(e,t)=>{this.world.onUserLeave(t)}),this.database.onObjectCreate=(e,t,a)=>{this.loadObjectFromPeer(e,t)},this.database.onObjectUpdate=(e,t,a)=>{console.log("onObjectUpdate",e,t)},this.database.onObjectGroup=(e,t)=>{this.objectManager.groupObjects(this.objectManager.getObjectByUUID(e.newParentUUID),this.objectManager.getObjectByUUID(e.newChildUUID),!0)},this.database.onObjectMove=(e,t)=>{},this.database.onObjectDestroy=({uuid:e},t)=>{this.objectManager.destroyObjectByUUID(e)};for(let e of await this.database.getObjects())this.loadObject(e);this.network=this.database.network,this.sendData=(e,t)=>{this.network.broadcast(JSON.stringify({opcode:e,content:t}))},this.sendTo=(e,t,a)=>{this.network.sendTo(a,JSON.stringify({opcode:e,content:t}))},this.loading=!1}async leave(){this.database.eventHooks.removeAllListeners(),this.removeAllListeners(),this.getObjectManager().destroyAllObjects(),this.realmData.type===n.EPHEMERAL&&await this.conjure.realms.removeDatabase(this.realmData),this.terrain&&this.terrain.destroy();for(let e of this.features)await e.unload();this.world.group.remove(this.group),console.log("successfully left realm")}getData(){return this.realmData}update(e){for(let t of this.features)t.update(e);this.objectManager.update(e)}getObjectManager(){return this.objectManager}async loadObjectFromPeer(e,t){try{await this.loadObject(t)}catch(a){console.log("REALM: could not load object",object.uuid,"with error",a)}}async createObject(e){e.userData.originatorID=this.conjure.assetSync.peerID,e.updateMatrixWorld(),this.restorePhysics(e);const t=await this.database.createObject(e);t&&this.objectManager.addObject(e,!0)}async loadObject(e){if(!e)return;try{return this.restorePhysics(e),this.objectManager.addObject(e),!0}catch(t){return console.log(t,e),!1}}restorePhysics(e){if(!e.userData.physics||e.body)return;if(this.objectManager.getPhysicsType(e.userData.physics.type)<0)return;this.conjure.physics.add.existing(e,{shape:this.objectManager.getPhysicsShape(e.userData.physics.shape),collisionFlags:this.objectManager.getPhysicsType(e.userData.physics.type),mass:e.userData.physics.mass}),e.body.setGravity(0,-e.userData.physics.gravity,0),e.body.setBounciness(e.userData.physics.bounciness)}async updateObjectPosition(e){await this.updateObject(e);const t=await this.database.updateObject(e)}async updateObject(e){if(!e)return;if(!e.uuid){console.log("Tried to update object without a hash! Are you sure this object is a top parent?");return}await this.database.updateObject(e)}async destroyObject(e){if(!e)return;if(e.userData.markedDestroyed=!0,this.objectManager.getObject(e)){let t=await this.database.dereferenceObject(e);t?(this.world.objectControls.detach(e),this.objectManager.destroyObject(e)):(e.userData.markedDestroyed=!1,console.log("failed to remove object",e.uuid))}}}
