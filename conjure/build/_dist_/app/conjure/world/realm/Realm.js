import*as i from"https://cdn.skypack.dev/pin/three@v0.117.1-NetLzdTnw9ga3y6o633U/min/three.js";import"./Terrain.js";import c from"../features/FeatureArtGallery.js";import n from"../features/FeatureLobby.js";import"../../../backend/realm/RealmData.js";import u from"../Platform.js";import h from"./ObjectManager.js";import d from"../features/FeatureDiscord.js";import l from"../../../../../web_modules/events.js";import{NETWORKING_OPCODES as s}from"../../../backend/Constants.js";export default class b extends l{constructor(e,t){super();this.world=e,this.conjure=this.world.conjure,this.group=new i.Group,this.world.group.add(this.group),this.objectLoader=new i.ObjectLoader,this.objectManager=new h(this),this.realmData=t,this.realmID=t.getID(),this.onObjectCreate=this.onObjectCreate.bind(this),this.onObjectUpdate=this.onObjectUpdate.bind(this),this.onObjectGroup=this.onObjectGroup.bind(this),this.onObjectMove=this.onObjectMove.bind(this),this.onObjectDestroy=this.onObjectDestroy.bind(this),this.vec3=new i.Vector3,this.quat=new i.Quaternion,this.features=[],this.loading=!0,this.networkProtocolCallbacks={}}async preload(){this.realmData.getData().worldData.playsAudio&&await this.conjure.getAudioManager().create(!0),await this.preloadFeatures()}async preloadFeatures(){for(let e of this.realmData.getData().worldSettings.features)switch(e){case"Gallery":{let t=new c(this);await t.preload(),this.features.push(t);break}case"Platform":{this.terrain=new u(this.conjure,this.world.group);break}case"Lobby":{let t=new n(this);await t.preload(),this.features.push(t);break}case"Discord":{let t=new d(this);await t.preload(),this.features.push(t);break}default:break}}sendData(e,t){this.network.broadcast(JSON.stringify({opcode:e,content:t}))}sendTo(e,t,a){this.network.sendTo(a,JSON.stringify({opcode:e,content:t}))}async load(){for(let e of this.features)await e.load();console.log(this.realmData),this.database=await this.world.conjure.realms.addDatabase(this.realmData,({message:e})=>{this.conjure.loadingScreen.setText(e,!1)}),this.database.on(s.OBJECT.RECEIVE,this.onObjectCreate),this.database.on(s.OBJECT.CREATE,this.onObjectCreate),this.database.on(s.OBJECT.UPDATE_PROPERTIES,this.onObjectUpdate),this.database.on(s.OBJECT.DESTROY,this.onObjectDestroy),this.database.on(s.OBJECT.MOVE,this.onObjectMove),this.database.on(s.OBJECT.GROUP,this.onObjectGroup);for(let e of await this.database.getObjects())this.loadObjectFromPeer(e.uuid,e.data);this.network=this.database.network,this.loading=!1}async leave(){this.getObjectManager().destroyAllObjects(),await this.conjure.realms.removeDatabase(this.realmData),this.terrain&&this.terrain.destroy();for(let e of this.features)await e.unload();this.world.group.remove(this.group),console.log("successfully left realm")}getData(){return this.realmData}update(e){for(let t of this.features)t.update(e)}getObjectManager(){return this.objectManager}onObjectCreate({uuid:e,data:t},a){this.loadObjectFromPeer(e,t)}onObjectUpdate({uuid:e,data:t},a){console.log("onObjectUpdate",{uuid:e,data:t})}onObjectGroup(e,t){this.objectManager.groupObjects(this.objectManager.getObjectByUUID(e.newParentUUID),this.objectManager.getObjectByUUID(e.newChildUUID),!0)}onObjectMove(e,t){for(let a of e.objects)this.objectManager.updateObjectFromClient(a.uuid,a.data)}async onObjectDestroy(e,t){this.objectManager.destroyObjectByHash(e)}async loadObjectFromPeer(e,t){try{await this.loadObject(t)}catch(a){console.log("REALM: could not load object",object.uuid,"with error",a)}}async createObject(e){e.userData.originatorID=this.conjure.getProfile().getID(),e.position.copy(this.world.user.previewMeshPoint.getWorldPosition(this.vec3)),e.quaternion.copy(this.world.user.previewMeshPoint.getWorldQuaternion(this.quat)),e.updateMatrixWorld();let t=await this.objectToJSON(e);const a=await this.database.createObject({uuid:e.uuid,data:t});a&&(this.objectManager.addObject(e,!0),this.conjure.screenManager.hideScreen())}async objectToJSON(e){let t=e.toJSON();return t;if(t.images)for(let a=0;a<t.images.length;a++){if(t.images[a].url===this.conjure.assetManager.missingTextureData)continue;t.images[a].hash=await this.conjure.assetManager.createAsset(ASSET_TYPE.TEXTURE,t.images[a].url,t.images[a].uuid);let o=this.conjure.assetManager.getByIPFSHash(ASSET_TYPE.TEXTURE,t.images[a].hash).data.uuid;if(o!==t.images[a].uuid){if(t.textures)for(let r=0;r<t.textures.length;r++)t.textures[r].image===t.images[a].uuid&&(t.textures[r].image=o);t.images[a].uuid=o}t.images[a].url=""}}async loadObject(e){if(!e||typeof e!="string")return;try{let t=this.loadObjectAssets(JSON.parse(e));return this.objectManager.addObject(t),!0}catch(t){return console.log(t,e),!1}}loadObjectAssets(e){return this.objectLoader.parse(e)}async updateObjectPosition(e){await this.updateObject(e);const t=await this.database.updateObject(e.userData.hash,e.userData.lastUpdate)}async updateObject(e){if(!e)return;if(!e.uuid){console.log("Tried to update object without a hash! Are you sure this object is a top parent?");return}let t=await this.objectToJSON(e);await this.database.updateObject({realmID:this.realmID,uuid:object.uuid,data:t})}async destroyObject(e){if(e.userData.markedDestroyed=!0,this.objectManager.getObject(e)){let t=await this.database.dereferenceObject({realmID:this.realmID,uuid:object.uuid});t?this.objectManager.destroyObject(e):(e.userData.markedDestroyed=!1,console.log("failed to remove object",e.uuid))}else{let t=this.objectManager.getTopGroupObject(e);this.objectManager.destroyObject(e,{isChild:!0}),await this.updateObject(t)}}}
