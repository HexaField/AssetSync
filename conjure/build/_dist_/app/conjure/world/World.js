import*as a from"https://cdn.skypack.dev/pin/three@v0.117.1-NetLzdTnw9ga3y6o633U/min/three.js";import{NETWORKING_OPCODES as o}from"./realm/NetworkingSchemas.js";import h,{GLOBAL_REALMS as u}from"./realm/Realm.js";import d from"../user/User.js";import m from"../user/UserRemote.js";import{CONJURE_MODE as n}from"../Conjure.js";import{INTERACT_TYPES as f}from"../screens/hud/HUDInteract.js";import r,{REALM_WHITELIST as c}from"./realm/RealmData.js";import g from"../../../../web_modules/lodash.js";export default class j{constructor(e){this.conjure=e,this.scene=this.conjure.scene,this.realmHandler=e.realms,this.group=new a.Group,this.scene.add(this.group),this.user=new d(e),this.remoteUsers={},this.lastUserUpdate={},this.savePeriod=5,this.updatesPerSecond=60,this.updateCount=0,this.updateCountMax=60/this.updatesPerSecond,this.interactMaxDistance=4,this.deltaThreshold=.1,this.vec3=new a.Vector3,this.quat=new a.Quaternion,this.globalRealms=[],this.spawnLocation=new a.Vector3(0,2,0),this.lastRealmID="Lobby",this.onUserData=this.onUserData.bind(this),this.onUserLeave=this.onUserLeave.bind(this),this.onUserMove=this.onUserMove.bind(this),this.onUserAnimation=this.onUserAnimation.bind(this)}async loadDefault(){if(this.conjure.urlParams.r){if(await this.joinRealmByID(this.conjure.urlParams.r))return}else if(await this.joinRealmByID(await self.simpleStorage.get("conjure-profile-lastJoinedRealm")))return;await this.joinRealmByID("Lobby")}async getRealms(){let e={};for(let t of await this.conjure.getProfile().getServiceManager().getRealmsFromConnectedServices())e[t.id]=new r(t).getData();for(let t of await this.conjure.realms.getRealms())e[t.id]=new r(t).getData();for(let t of this.globalRealms)e[t.id]=t;return Object.values(e)}async getRealmsAndPinned(){let e={};for(let t of await this.conjure.getProfile().getServiceManager().getRealmsFromConnectedServices())e[t.id]={realmData:new r(t).getData(),pinned:!1};for(let t of await this.conjure.realms.getRealms())e[t.id]?e[t.id].pinned=!0:e[t.id]={realmData:new r(t).getData(),pinned:!0};for(let t of this.globalRealms)e[t.id]={realmData:t,pinned:"global"};return Object.values(e)}async getRealm(e,t){for(let s of this.globalRealms)if(e===s.id)return s;return await this.conjure.realms.getRealm(e)}async preloadGlobalRealms(){for(let e of Object.values(u)){const t=new r(e).getData();t.global=!0,this.globalRealms.push(t),await this.conjure.realms.pinRealm(t,!0)}}async joinRealm(e,t={}){if(!t.force&&this.realm&&e.getID()===this.realm.realmID)return!1;if(this.realm&&(this.lastRealmID=this.realm.realmID,await this.realm.leave(),this.destroyAllRemoteUsers(),this.realm=void 0),this.conjure.setConjureMode(n.LOADING),e.getData().whitelist){if(e.getData().whitelist.type===c.SERVICE&&!this.conjure.getProfile().getServiceManager().getServiceLinked("Discord"))return!1;if(e.getData().whitelist.type===c.PASSCODE){if(this.conjure.setConjureMode(n.LOADING),this.conjure.loadingScreen.setPasscodeVisible(!0),console.log("Waiting for valid passcode..."),!await this.waitForPasscode(e.getData().whitelist.ids))return console.log("Maybe another time..."),!1;console.log("Passcode successful!"),this.conjure.loadingScreen.setPasscodeVisible(!1),this.conjure.loadingScreen.setText("Passcode successful!")}}this.realm=new h(this,e),await self.simpleStorage.set("conjure-profile-lastJoinedRealm",e.getID()),await this.realm.preload(),await this.realm.load(),this.realm.on(o.USER.METADATA,this.onUserData),this.realm.on(o.USER.MOVE,this.onUserMove),this.realm.on(o.USER.ANIMATION,this.onUserAnimation);let s=e.getData().worldData.spawnPosition||new a.Vector3(0,1,0);return this.spawnLocation=s,this.user.teleport(s.x,s.y,s.z),this.conjure.setConjureMode(n.EXPLORE),!0}async forceReloadCurrentRealm(){await this.getRealms(),await this.joinRealmByID(this.realm.realmID,{force:!0})}async waitForPasscode(e){return new Promise(t=>{this.conjure.loadingScreen.setPasscodeCallback(async s=>{s===void 0&&t(!1),e.includes(s)&&t(!0)})})}async joinRealmByID(e,t={}){if(!e)return!1;if(this.realm&&this.realm.loading)return!1;let s=await this.getRealm(e,!0);if(!s)return!1;let i=new r(s);return i?(await this.joinRealm(i,t)||await this.joinRealmByID(this.lastRealmID,t),!0):!1}getScreensDisabled(){return this.realm?!!this.realm.realmData.getData().worldData.disableScreens:!1}update(e){this.user.update(e),this.realm&&this.realm.update(e);let t=!1,s=this.interactMaxDistance;for(let i of Object.values(this.remoteUsers)){if(i.timedOut)continue;if(i.update(e),i&&i.group&&(!t&&this.conjure.conjureMode===n.EXPLORE)){let l=this.conjure.worldRaycaster.intersectObject(i.group,!0);l.length>0&&l[0].distance<s&&(s=l[0].distance,t=!0,this.conjure.screenManager.hudExplore.interact.setObject(i,f.USER))}}this.conjure.conjureMode===n.EXPLORE,this.user.group&&this.user.group.body&&this.getWorldUpdates(e)}getWorldUpdates(){let e=!0;if(this.updateCount++,this.updateCount>this.savePeriod*60&&(this.updateCount=0,e=!1),this.updateCount%this.updateCountMax===0){e||this.sendData(o.HEARTBEAT,{});let t={position:this.user.group.getWorldPosition(this.vec3),rotation:this.user.group.getWorldQuaternion(this.quat),velocity:this.user.group.body.velocity};(e||!g.isEqual(this.lastUserUpdate,t))&&(this.sendData(o.USER.MOVE,t),this.lastUserUpdate=t)}}async sendData(e,t){this.realm&&await this.realm.sendData(e,t)}async sendTo(e,t,s){this.realm&&await this.realm.sendTo(e,t,s)}onUserData(e,t){this.remoteUsers[t]?this.remoteUsers[t].updateInfo(e):(this.remoteUsers[t]=new m(this.conjure,e,t),window.CONSOLE.log(e.username+" has joined"))}destroyAllRemoteUsers(){for(let e of Object.values(this.remoteUsers))this.scene.remove(e.group),delete this.remoteUsers[e.peerID]}onUserLeave(e){if(!this.remoteUsers[e])return;window.CONSOLE.log(this.remoteUsers[e].username+" has left"),this.scene.remove(this.remoteUsers[e].group),delete this.remoteUsers[e]}onUserAnimation(e,t){if(!this.remoteUsers[t])return;this.remoteUsers[t].setAction(e.name.trim(),e.fadeTime,e.once,e.startTime)}onUserMove(e,t){if(!this.remoteUsers[t])return;this.remoteUsers[t].setPhysics(e)}getObjects(){return this.realm?this.realm.getObjectManager().objects:[]}}
