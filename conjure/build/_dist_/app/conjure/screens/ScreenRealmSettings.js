import s from"./ScreenBase.js";import i from"./elements/ScreenElementButton.js";import r from"./elements/ScreenElementJSONTree.js";import{REALM_WORLD_GENERATORS as n,REALM_VISIBILITY as h,REALM_WHITELIST as a}from"../world/realm/RealmData.js";import c from"../world/realm/RealmData.js";export default class o extends s{constructor(e,t){super(e,t);this.group.add(this.background),this.fromService=!1,this.createRealm=this.createRealm.bind(this),this.updateData=this.updateData.bind(this),this.selectFromList=this.selectFromList.bind(this),this.selectedFromList=this.selectedFromList.bind(this),this.isCreating=!1,this.jsonTree=new r(this,this,{width:this.width,height:this.height,alwaysUpdate:!0}),this.registerElement(this.jsonTree),this.cancelButton=new i(this,this,{x:-this.width/3,y:-this.height/2+.2,width:this.buttonWidth,height:this.buttonHeight}),this.cancelButton.setText("Cancel"),this.cancelButton.setOnClickCallback(()=>{this.data={},this.fromService=!1,this.screenManager.hideLastOpenScreen()}),this.registerElement(this.cancelButton),this.createButton=new i(this,this,{x:0,y:-this.height/2+.2,width:this.buttonWidth,height:this.buttonHeight}),this.createButton.setText("Create"),this.createButton.setOnClickCallback(this.createRealm),this.registerElement(this.createButton),this.createFromServiceButton=new i(this,this,{x:this.width/3,y:-this.height/2+.2,width:this.buttonWidth,height:this.buttonHeight}),this.createFromServiceButton.setText("Create From Service"),this.createFromServiceButton.setOnClickCallback(this.selectFromList),this.registerElement(this.createFromServiceButton),this.data=void 0}getSchema(){return{type:"json",label:"name",items:{id:{type:"static",label:"ID"},name:{type:this.fromService?"static":"text",label:"Name"},iconURL:{type:this.fromService?"static":"text",label:"Icon"},visibility:{type:this.isCreating?"list":"static",label:"Visibility",items:Object.values(h)},whitelist:{type:"json",label:"Whitelist Settings",items:{type:{type:this.isCreating&&!this.fromService?"list":"static",label:"Whitelist Type",items:this.fromService?[a.SERVICE]:Object.values(a)}}},worldSettings:{type:"json",label:"World Settings",items:{worldGeneratorType:{type:"list",label:"Terrain Type",items:Object.values(n)}}}}}}showScreen(e,t={}){if(e&&!t.isCreating&&!this.screenManager.conjure.getWorld().realm)return"cancel";if(super.showScreen(e),!e)return;this.isCreating=Boolean(t.isCreating),this.isCreating&&!this.data&&(this.fromService=!1),this.jsonTree.setSchema(this.getSchema()),this.isCreating?(this.createButton.setText("Create"),this.createFromServiceButton.setHidden(!1),this.data||(this.data=new c(t.data?t.data.getData():{})),this.jsonTree.updateTree(this.data.getData(),this.updateData)):(this.createButton.setText("Update"),this.createFromServiceButton.setHidden(!0),this.data=this.screenManager.conjure.getWorld().realm.realmData,this.jsonTree.updateTree(this.data.getData(),this.updateData))}async createRealm(){}async selectFromList(){this.screenManager.showScreen(this.screenManager.screenList),this.screenManager.screenList.setOnSelectCallback(this.selectedFromList),this.screenManager.screenList.setList((await this.screenManager.conjure.getProfile().getServiceManager().getPotentialRealms()).filter(e=>e.owner),"name")}selectedFromList(e){if(!this.data)return;if(!e.owner)return;this.fromService=!0,this.data.getData().id=e.id,this.data.getData().name=e.name,this.data.getData().iconURL=e.iconURL,this.data.getData().whitelist.type=a.SERVICE,this.jsonTree.setSchema(this.getSchema()),this.jsonTree.updateTree(this.data.getData(),this.updateData)}updateData(){}update(e){super.update(e)}}
