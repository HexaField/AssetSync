export default class s{constructor(a){this.assetSync=a,this.pinnedRealms=[],this.earliestRealmTime=1599176386e3,this.databases={}}async get(a){return await this.assetSync.dhtPlugin.get("realm/"+a)}async put(a,e){return await this.assetSync.dhtPlugin.put("realm/"+a,e)}async validateRealms(){}async initialise(){}async savePinnedRealms(){try{await this.assetSync.storagePlugin.writeFile("recent_realms.json",JSON.stringify(this.pinnedRealms))}catch(a){console.log("ConjureDatabase: could not save recent realms",this.pinnedRealms,"with error",a)}}async loadPinnedRealms(){try{const a=await this.assetSync.storagePlugin.readFile("recent_realms.json");return a?JSON.parse(a)||[]:[]}catch(a){console.log("ConjureDatabase: could not read recent realms with error",a);return}}async pinRealm(a,e){}async updateRealm(a){await this.addRealms(a)}getRealm(a){return;for(let e of this.pinnedRealms)if(e.id===a)return e}getRealms(){return[]}async addDatabase(a){if(this.databases[a])return;this.databases[a]=new SyncedDatabase(this.dataHandler.getNetworkManager(),"realms/"+String(a),this.dataHandler.getLocalFiles()),await this.databases[a].initialise()}async removeDatabase(a){if(!this.databases[a])return;await this.databases[a].close(),delete this.databases[a]}async subscribe(a,e,t){}async unsubscribe(a){this.databases[a]&&this.databases[a].unregisterCallbacks()}async createObject(a,e,t){return this.databases[a]?await this.databases[a].addEntry(e,t):void 0}async updateObject(a,e,t){return this.databases[a]?await this.databases[a].addEntry(e,t):void 0}async destroyObject(a,e){return this.databases[a]?await this.databases[a].removeEntry(e):void 0}async getObjects(a){return this.databases[a]?await this.databases[a].getAllValues():[]}}
