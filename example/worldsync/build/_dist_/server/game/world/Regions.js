import{Region as c,coordsToLabel as h}from"./Region.js";import"../../../../web_modules/hyperdiff.js";import{RegionConfig as s}from"./RegionConfig.js";import{sqrDistance as u}from"./MathUtil.js";export class Regions{constructor(i={}){this.regions={},this.moveDistanceChangeThreshold=s.regionSize/2,this.viewDistance=i.viewDistance||16,this.generateFunction=i.generateFunction,this.loadFunction=i.loadFunction,this.unloadFunction=i.unloadFunction,this.lastViewPosition={x:-1e3,y:-1e4},this.viewPosition={x:0,y:0}}async createRegion(i,t){const e=new c(i,t);this.regions[e.getLabel()]=e,e.generateFunction=this.generateFunction,e.loadFunction=this.loadFunction,e.unloadFunction=this.unloadFunction,e.generateRegion().then(()=>{e.isLoaded=!1,e.updateView(this.viewPosition.x,this.viewPosition.y)})}updatePosition(i,t){this.viewPosition.x=i,this.viewPosition.y=t;const e=Object.values(this.regions);for(let o of e)o.needsUpdate=!0;const r=Math.round(i/s.regionSize),a=Math.round(t/s.regionSize),g=u({x:i,y:t},this.lastViewPosition);if(g<this.moveDistanceChangeThreshold)return;for(let o=r-this.viewDistance;o<r+this.viewDistance;o++)for(let n=a-this.viewDistance;n<a+this.viewDistance;n++)this.regions[h(o,n)]||this.createRegion(o,n);for(let o of e)o.updateView(i,t);this.lastViewPosition={x:i,y:t}}getRegionByCoords(i,t){const e=h(i,t);if(this.regions[e])return this.regions[e]}getRegionByLabel(i){if(this.regions[i])return this.regions[i]}getRegions(){return Object.values(this.regions)}}
