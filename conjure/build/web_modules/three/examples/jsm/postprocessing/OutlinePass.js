import{n as v,a7 as o,M as w,D as m,at as d,az as k,aA as b,aB as M,av as D,au as g,o as P,V as T,aC as O,L as B,ay as E}from"../../../../common/three.module-36fff313.js";import{C as S}from"../../../../common/CopyShader-431afdd7.js";import{P as x}from"../../../../common/Pass-c5e1ba23.js";var u=function(e,l,r,a){this.renderScene=l,this.renderCamera=r,this.selectedObjects=a!==void 0?a:[],this.visibleEdgeColor=new v(1,1,1),this.hiddenEdgeColor=new v(.1,.04,.02),this.edgeGlow=0,this.usePatternTexture=!1,this.edgeThickness=1,this.edgeStrength=3,this.downSampleRatio=2,this.pulsePeriod=0,this._visibilityCache=new Map,x.call(this),this.resolution=e!==void 0?new o(e.x,e.y):new o(256,256);var s={minFilter:B,magFilter:B,format:E},i=Math.round(this.resolution.x/this.downSampleRatio),n=Math.round(this.resolution.y/this.downSampleRatio);this.maskBufferMaterial=new w({color:16777215}),this.maskBufferMaterial.side=m,this.renderTargetMaskBuffer=new d(this.resolution.x,this.resolution.y,s),this.renderTargetMaskBuffer.texture.name="OutlinePass.mask",this.renderTargetMaskBuffer.texture.generateMipmaps=!1,this.depthMaterial=new k,this.depthMaterial.side=m,this.depthMaterial.depthPacking=b,this.depthMaterial.blending=M,this.prepareMaskMaterial=this.getPrepareMaskMaterial(),this.prepareMaskMaterial.side=m,this.prepareMaskMaterial.fragmentShader=c(this.prepareMaskMaterial.fragmentShader,this.renderCamera),this.renderTargetDepthBuffer=new d(this.resolution.x,this.resolution.y,s),this.renderTargetDepthBuffer.texture.name="OutlinePass.depth",this.renderTargetDepthBuffer.texture.generateMipmaps=!1,this.renderTargetMaskDownSampleBuffer=new d(i,n,s),this.renderTargetMaskDownSampleBuffer.texture.name="OutlinePass.depthDownSample",this.renderTargetMaskDownSampleBuffer.texture.generateMipmaps=!1,this.renderTargetBlurBuffer1=new d(i,n,s),this.renderTargetBlurBuffer1.texture.name="OutlinePass.blur1",this.renderTargetBlurBuffer1.texture.generateMipmaps=!1,this.renderTargetBlurBuffer2=new d(Math.round(i/2),Math.round(n/2),s),this.renderTargetBlurBuffer2.texture.name="OutlinePass.blur2",this.renderTargetBlurBuffer2.texture.generateMipmaps=!1,this.edgeDetectionMaterial=this.getEdgeDetectionMaterial(),this.renderTargetEdgeBuffer1=new d(i,n,s),this.renderTargetEdgeBuffer1.texture.name="OutlinePass.edge1",this.renderTargetEdgeBuffer1.texture.generateMipmaps=!1,this.renderTargetEdgeBuffer2=new d(Math.round(i/2),Math.round(n/2),s),this.renderTargetEdgeBuffer2.texture.name="OutlinePass.edge2",this.renderTargetEdgeBuffer2.texture.generateMipmaps=!1;var t=4,h=4;this.separableBlurMaterial1=this.getSeperableBlurMaterial(t),this.separableBlurMaterial1.uniforms.texSize.value.set(i,n),this.separableBlurMaterial1.uniforms.kernelRadius.value=1,this.separableBlurMaterial2=this.getSeperableBlurMaterial(h),this.separableBlurMaterial2.uniforms.texSize.value.set(Math.round(i/2),Math.round(n/2)),this.separableBlurMaterial2.uniforms.kernelRadius.value=h,this.overlayMaterial=this.getOverlayMaterial(),S===void 0&&console.error("OutlinePass relies on CopyShader");var f=S;this.copyUniforms=D.clone(f.uniforms),this.copyUniforms.opacity.value=1,this.materialCopy=new g({uniforms:this.copyUniforms,vertexShader:f.vertexShader,fragmentShader:f.fragmentShader,blending:M,depthTest:!1,depthWrite:!1,transparent:!0}),this.enabled=!0,this.needsSwap=!1,this.oldClearColor=new v,this.oldClearAlpha=1,this.fsQuad=new x.FullScreenQuad(null),this.tempPulseColor1=new v,this.tempPulseColor2=new v,this.textureMatrix=new P;function c(p,C){var y=C.isPerspectiveCamera?"perspective":"orthographic";return p.replace(/DEPTH_TO_VIEW_Z/g,y+"DepthToViewZ")}};u.prototype=Object.assign(Object.create(x.prototype),{constructor:u,dispose:function(){this.renderTargetMaskBuffer.dispose(),this.renderTargetDepthBuffer.dispose(),this.renderTargetMaskDownSampleBuffer.dispose(),this.renderTargetBlurBuffer1.dispose(),this.renderTargetBlurBuffer2.dispose(),this.renderTargetEdgeBuffer1.dispose(),this.renderTargetEdgeBuffer2.dispose()},setSize:function(e,l){this.renderTargetMaskBuffer.setSize(e,l);var r=Math.round(e/this.downSampleRatio),a=Math.round(l/this.downSampleRatio);this.renderTargetMaskDownSampleBuffer.setSize(r,a),this.renderTargetBlurBuffer1.setSize(r,a),this.renderTargetEdgeBuffer1.setSize(r,a),this.separableBlurMaterial1.uniforms.texSize.value.set(r,a),r=Math.round(r/2),a=Math.round(a/2),this.renderTargetBlurBuffer2.setSize(r,a),this.renderTargetEdgeBuffer2.setSize(r,a),this.separableBlurMaterial2.uniforms.texSize.value.set(r,a)},changeVisibilityOfSelectedObjects:function(e){var l=this._visibilityCache;function r(i){i.isMesh&&(e===!0?i.visible=l.get(i):(l.set(i,i.visible),i.visible=e))}for(var a=0;a<this.selectedObjects.length;a++){var s=this.selectedObjects[a];s.traverse(r)}},changeVisibilityOfNonSelectedObjects:function(e){var l=this._visibilityCache,r=[];function a(t){t.isMesh&&r.push(t)}for(var s=0;s<this.selectedObjects.length;s++){var i=this.selectedObjects[s];i.traverse(a)}function n(t){if(t.isMesh||t.isSprite){for(var h=!1,f=0;f<r.length;f++){var c=r[f].id;if(c===t.id){h=!0;break}}if(h===!1){var p=t.visible;(e===!1||l.get(t)===!0)&&(t.visible=e),l.set(t,p)}}else(t.isPoints||t.isLine)&&(e===!0?t.visible=l.get(t):(l.set(t,t.visible),t.visible=e))}this.renderScene.traverse(n)},updateTextureMatrix:function(){this.textureMatrix.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),this.textureMatrix.multiply(this.renderCamera.projectionMatrix),this.textureMatrix.multiply(this.renderCamera.matrixWorldInverse)},render:function(e,l,r,a,s){if(this.selectedObjects.length>0){this.oldClearColor.copy(e.getClearColor()),this.oldClearAlpha=e.getClearAlpha();var i=e.autoClear;e.autoClear=!1,s&&e.state.buffers.stencil.setTest(!1),e.setClearColor(16777215,1),this.changeVisibilityOfSelectedObjects(!1);var n=this.renderScene.background;if(this.renderScene.background=null,this.renderScene.overrideMaterial=this.depthMaterial,e.setRenderTarget(this.renderTargetDepthBuffer),e.clear(),e.render(this.renderScene,this.renderCamera),this.changeVisibilityOfSelectedObjects(!0),this._visibilityCache.clear(),this.updateTextureMatrix(),this.changeVisibilityOfNonSelectedObjects(!1),this.renderScene.overrideMaterial=this.prepareMaskMaterial,this.prepareMaskMaterial.uniforms.cameraNearFar.value.set(this.renderCamera.near,this.renderCamera.far),this.prepareMaskMaterial.uniforms.depthTexture.value=this.renderTargetDepthBuffer.texture,this.prepareMaskMaterial.uniforms.textureMatrix.value=this.textureMatrix,e.setRenderTarget(this.renderTargetMaskBuffer),e.clear(),e.render(this.renderScene,this.renderCamera),this.renderScene.overrideMaterial=null,this.changeVisibilityOfNonSelectedObjects(!0),this._visibilityCache.clear(),this.renderScene.background=n,this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=this.renderTargetMaskBuffer.texture,e.setRenderTarget(this.renderTargetMaskDownSampleBuffer),e.clear(),this.fsQuad.render(e),this.tempPulseColor1.copy(this.visibleEdgeColor),this.tempPulseColor2.copy(this.hiddenEdgeColor),this.pulsePeriod>0){var t=(1+.25)/2+Math.cos(performance.now()*.01/this.pulsePeriod)*(1-.25)/2;this.tempPulseColor1.multiplyScalar(t),this.tempPulseColor2.multiplyScalar(t)}this.fsQuad.material=this.edgeDetectionMaterial,this.edgeDetectionMaterial.uniforms.maskTexture.value=this.renderTargetMaskDownSampleBuffer.texture,this.edgeDetectionMaterial.uniforms.texSize.value.set(this.renderTargetMaskDownSampleBuffer.width,this.renderTargetMaskDownSampleBuffer.height),this.edgeDetectionMaterial.uniforms.visibleEdgeColor.value=this.tempPulseColor1,this.edgeDetectionMaterial.uniforms.hiddenEdgeColor.value=this.tempPulseColor2,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.separableBlurMaterial1,this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=u.BlurDirectionX,this.separableBlurMaterial1.uniforms.kernelRadius.value=this.edgeThickness,e.setRenderTarget(this.renderTargetBlurBuffer1),e.clear(),this.fsQuad.render(e),this.separableBlurMaterial1.uniforms.colorTexture.value=this.renderTargetBlurBuffer1.texture,this.separableBlurMaterial1.uniforms.direction.value=u.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer1),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.separableBlurMaterial2,this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetEdgeBuffer1.texture,this.separableBlurMaterial2.uniforms.direction.value=u.BlurDirectionX,e.setRenderTarget(this.renderTargetBlurBuffer2),e.clear(),this.fsQuad.render(e),this.separableBlurMaterial2.uniforms.colorTexture.value=this.renderTargetBlurBuffer2.texture,this.separableBlurMaterial2.uniforms.direction.value=u.BlurDirectionY,e.setRenderTarget(this.renderTargetEdgeBuffer2),e.clear(),this.fsQuad.render(e),this.fsQuad.material=this.overlayMaterial,this.overlayMaterial.uniforms.maskTexture.value=this.renderTargetMaskBuffer.texture,this.overlayMaterial.uniforms.edgeTexture1.value=this.renderTargetEdgeBuffer1.texture,this.overlayMaterial.uniforms.edgeTexture2.value=this.renderTargetEdgeBuffer2.texture,this.overlayMaterial.uniforms.patternTexture.value=this.patternTexture,this.overlayMaterial.uniforms.edgeStrength.value=this.edgeStrength,this.overlayMaterial.uniforms.edgeGlow.value=this.edgeGlow,this.overlayMaterial.uniforms.usePatternTexture.value=this.usePatternTexture,s&&e.state.buffers.stencil.setTest(!0),e.setRenderTarget(r),this.fsQuad.render(e),e.setClearColor(this.oldClearColor,this.oldClearAlpha),e.autoClear=i}this.renderToScreen&&(this.fsQuad.material=this.materialCopy,this.copyUniforms.tDiffuse.value=r.texture,e.setRenderTarget(null),this.fsQuad.render(e))},getPrepareMaskMaterial:function(){return new g({uniforms:{depthTexture:{value:null},cameraNearFar:{value:new o(.5,.5)},textureMatrix:{value:null}},vertexShader:["#include <morphtarget_pars_vertex>","#include <skinning_pars_vertex>","varying vec4 projTexCoord;","varying vec4 vPosition;","uniform mat4 textureMatrix;","void main() {","	#include <skinbase_vertex>","	#include <begin_vertex>","	#include <morphtarget_vertex>","	#include <skinning_vertex>","	#include <project_vertex>","	vPosition = mvPosition;","	vec4 worldPosition = modelMatrix * vec4( position, 1.0 );","	projTexCoord = textureMatrix * worldPosition;","}"].join(`
`),fragmentShader:["#include <packing>","varying vec4 vPosition;","varying vec4 projTexCoord;","uniform sampler2D depthTexture;","uniform vec2 cameraNearFar;","void main() {","	float depth = unpackRGBAToDepth(texture2DProj( depthTexture, projTexCoord ));","	float viewZ = - DEPTH_TO_VIEW_Z( depth, cameraNearFar.x, cameraNearFar.y );","	float depthTest = (-vPosition.z > viewZ) ? 1.0 : 0.0;","	gl_FragColor = vec4(0.0, depthTest, 1.0, 1.0);","}"].join(`
`)})},getEdgeDetectionMaterial:function(){return new g({uniforms:{maskTexture:{value:null},texSize:{value:new o(.5,.5)},visibleEdgeColor:{value:new T(1,1,1)},hiddenEdgeColor:{value:new T(1,1,1)}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:`varying vec2 vUv;				uniform sampler2D maskTexture;				uniform vec2 texSize;				uniform vec3 visibleEdgeColor;				uniform vec3 hiddenEdgeColor;								void main() {
					vec2 invSize = 1.0 / texSize;					vec4 uvOffset = vec4(1.0, 0.0, 0.0, 1.0) * vec4(invSize, invSize);					vec4 c1 = texture2D( maskTexture, vUv + uvOffset.xy);					vec4 c2 = texture2D( maskTexture, vUv - uvOffset.xy);					vec4 c3 = texture2D( maskTexture, vUv + uvOffset.yw);					vec4 c4 = texture2D( maskTexture, vUv - uvOffset.yw);					float diff1 = (c1.r - c2.r)*0.5;					float diff2 = (c3.r - c4.r)*0.5;					float d = length( vec2(diff1, diff2) );					float a1 = min(c1.g, c2.g);					float a2 = min(c3.g, c4.g);					float visibilityFactor = min(a1, a2);					vec3 edgeColor = 1.0 - visibilityFactor > 0.001 ? visibleEdgeColor : hiddenEdgeColor;					gl_FragColor = vec4(edgeColor, 1.0) * vec4(d);				}`})},getSeperableBlurMaterial:function(e){return new g({defines:{MAX_RADIUS:e},uniforms:{colorTexture:{value:null},texSize:{value:new o(.5,.5)},direction:{value:new o(.5,.5)},kernelRadius:{value:1}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:"#include <common>				varying vec2 vUv;				uniform sampler2D colorTexture;				uniform vec2 texSize;				uniform vec2 direction;				uniform float kernelRadius;								float gaussianPdf(in float x, in float sigma) {					return 0.39894 * exp( -0.5 * x * x/( sigma * sigma))/sigma;				}				void main() {					vec2 invSize = 1.0 / texSize;					float weightSum = gaussianPdf(0.0, kernelRadius);					vec4 diffuseSum = texture2D( colorTexture, vUv) * weightSum;					vec2 delta = direction * invSize * kernelRadius/float(MAX_RADIUS);					vec2 uvOffset = delta;					for( int i = 1; i <= MAX_RADIUS; i ++ ) {						float w = gaussianPdf(uvOffset.x, kernelRadius);						vec4 sample1 = texture2D( colorTexture, vUv + uvOffset);						vec4 sample2 = texture2D( colorTexture, vUv - uvOffset);						diffuseSum += ((sample1 + sample2) * w);						weightSum += (2.0 * w);						uvOffset += delta;					}					gl_FragColor = diffuseSum/weightSum;				}"})},getOverlayMaterial:function(){return new g({uniforms:{maskTexture:{value:null},edgeTexture1:{value:null},edgeTexture2:{value:null},patternTexture:{value:null},edgeStrength:{value:1},edgeGlow:{value:1},usePatternTexture:{value:0}},vertexShader:`varying vec2 vUv;
				void main() {
					vUv = uv;
					gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
				}`,fragmentShader:"varying vec2 vUv;				uniform sampler2D maskTexture;				uniform sampler2D edgeTexture1;				uniform sampler2D edgeTexture2;				uniform sampler2D patternTexture;				uniform float edgeStrength;				uniform float edgeGlow;				uniform bool usePatternTexture;								void main() {					vec4 edgeValue1 = texture2D(edgeTexture1, vUv);					vec4 edgeValue2 = texture2D(edgeTexture2, vUv);					vec4 maskColor = texture2D(maskTexture, vUv);					vec4 patternColor = texture2D(patternTexture, 6.0 * vUv);					float visibilityFactor = 1.0 - maskColor.g > 0.0 ? 1.0 : 0.5;					vec4 edgeValue = edgeValue1 + edgeValue2 * edgeGlow;					vec4 finalColor = edgeStrength * maskColor.r * edgeValue;					if(usePatternTexture)						finalColor += + visibilityFactor * (1.0 - maskColor.r) * (1.0 - patternColor.r);					gl_FragColor = finalColor;				}",blending:O,depthTest:!1,depthWrite:!1,transparent:!0})}}),u.BlurDirectionX=new o(1,0),u.BlurDirectionY=new o(0,1);export{u as OutlinePass};
