export default class r{constructor(e){this.conjure=e,this.services={}}getServiceAsJson(){let e={};for(let s of Object.keys(this.services))e[s]=this.services[s].toJson();return e}addService(e){this.services[e.getName()]=e}linkService(e){this.services[e].link()}unlinkService(e){this.services[e].unlink()}getServiceLinked(e){return this.services[e].getIsLinked()}getService(e){return this.services[e]}refreshServices(){this.conjure.getScreens().screenServices.selectService()}async initialiseServices(){for(let e of Object.values(this.services))await e.initialise();this.conjure.getScreens().screenServices.addServices()}async getPotentialRealms(){let e=[];for(let s of Object.values(this.services))e.push(...await s.getRealmsIDs());return e}async getRealmsFromConnectedServices(){let e=[];for(let s of Object.values(this.services)){let i=await s.getRealmsIDs();for(let t in i);}return e}setServicesFromDatabase(e){for(let s of Object.keys(e))this.getService(s)&&this.getService(s).readFromJson(e[s])}}
